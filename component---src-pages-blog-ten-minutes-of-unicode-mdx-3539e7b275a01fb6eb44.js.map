{"version":3,"file":"component---src-pages-blog-ten-minutes-of-unicode-mdx-3539e7b275a01fb6eb44.js","mappings":"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","sources":["webpack://gatsby-starter-hello-world/./src/pages/blog/ten-minutes-of-unicode.mdx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport {Container, Divider, Typography} from \"@mui/material\";\nimport {Box} from \"@mui/system\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    h2: \"h2\",\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    h3: \"h3\",\n    ol: \"ol\",\n    strong: \"strong\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(Typography, {\n    variant: \"h1\",\n    sx: {\n      pt: 5\n    },\n    gutterBottom: true\n  }, React.createElement(_components.h1, null, props.pageContext.frontmatter.title)), \"\\n\", React.createElement(Box, null, React.createElement(Typography, {\n    variant: \"h5\",\n    color: \"textSecondary\",\n    gutterBottom: true\n  }, props.pageContext.frontmatter.date)), \"\\n\", React.createElement(_components.h2, null, \"Unicode & The Unicode Standard\"), \"\\n\", React.createElement(_components.p, null, \"Unicode(formally, the Unicode Standard) is a framework for encoding, representing, and managing text on digital systems.Maintained by the Unicode Consortium, Unicode currently defines nearly 150, 000 characters across a wide variety of scripts and symbols.Unicode assigns each character a code point, a unique number, but it’s essential to remember that Unicode itself is not an encoding; it’s a map of code points that encodings like UTF - 8, UTF - 16, and UTF - 32 then translate into bytes.\"), \"\\n\", React.createElement(_components.p, null, \"As of Unicode v15.0, the standard includes 161 scripts—some used by only one language and others by multiple languages. Unicode supports current and historic scripts, including extinct languages.\"), \"\\n\", React.createElement(_components.h2, null, \"Clarification on Glyphs vs. Characters\"), \"\\n\", React.createElement(_components.p, null, \"It’s common to refer to characters as \\\"glyphs,\\\" but technically a glyph is the visual representation of a character and can vary depending on the font.\"), \"\\n\", React.createElement(_components.h2, null, \"What is a Script?\"), \"\\n\", React.createElement(_components.p, null, \"In Unicode, a script is a set of characters and symbols used for writing one or more languages. For example:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Basic Latin script spans code points U+0000 to U+007F and includes the English alphabet.\"), \"\\n\", React.createElement(_components.li, null, \"Cyrillic script spans U+0400 to U+04FF and includes characters for Russian and related languages.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Some scripts, like Armenian, represent only one language, while others, like Latin, are used by multiple languages, including English, French, and Vietnamese.\"), \"\\n\", React.createElement(_components.h2, null, \"The Era Before Unicode\"), \"\\n\", React.createElement(_components.p, null, \"Before Unicode, text encoding was fragmented into various character encodings specific to languages or regions (e.g., ASCII, ISO 8859, and Windows-1252). These encoding standards often conflicted, resulting in garbled text when transferred across systems that used different encoding schemes.\"), \"\\n\", React.createElement(_components.p, null, \"For example:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"ASCII uses one 8-bit byte per character, but its code points cover only the basic Latin alphabet and control characters.\"), \"\\n\", React.createElement(_components.li, null, \"Extended standards, like ISO 8859 and Windows-1252, add characters but remain limited by encoding space, often overlapping in ways that caused compatibility issues.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Unicode was created to unify these encoding standards into a single, comprehensive system to represent most of the world's languages.\"), \"\\n\", React.createElement(_components.h2, null, \"I/O, Bytes & Encodings\"), \"\\n\", React.createElement(_components.h3, null, \"Why There’s No Such Thing as \\\"Plain Text\\\"\"), \"\\n\", React.createElement(_components.p, null, \"When dealing with text as bytes, knowing the encoding used to generate those bytes is crucial. Text without encoding context is meaningless to a computer, as bytes are just binary data until interpreted by an encoding scheme.\"), \"\\n\", React.createElement(_components.p, null, \"This is especially true in I/O operations. When a text file is sent from computer A in Japan to computer B in the USA, we need the correct encoding to interpret the byte stream properly.\"), \"\\n\", React.createElement(_components.h3, null, \"How Encoding is Determined\"), \"\\n\", React.createElement(_components.p, null, \"Encoding is often specified by context:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Over the internet, it’s specified in HTTP headers (e.g., \\\"Content-Type: text/html; charset=UTF-8\\\").\"), \"\\n\", React.createElement(_components.li, null, \"In HTML or XML files, it appears in metadata (<meta charset=\\\"UTF-8\\\">).\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"When encoding isn’t specified, heuristics can help, but they are unreliable. Always specify encoding to avoid misinterpretation.\"), \"\\n\", React.createElement(_components.h2, null, \"How UTF-8 Works\"), \"\\n\", React.createElement(_components.p, null, \"UTF-8 is a variable-length encoding that represents Unicode code points in 1 to 4 bytes. It’s backward-compatible with ASCII, meaning ASCII text is also valid UTF-8 text.\"), \"\\n\", React.createElement(_components.p, null, \"Example:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"The letter \\\"A\\\" (code point U+0041) in UTF-8 is encoded as a single byte (0x41).\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"UTF-8 is widely used on the web and is often the default encoding in systems, programming languages, and applications.\"), \"\\n\", React.createElement(_components.h2, null, \"Notes on Encoding Variants\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"UTF-16 uses 2 or 4 bytes per character, which can be beneficial for languages with many non-ASCII characters but has disadvantages in storage efficiency.\"), \"\\n\", React.createElement(_components.li, null, \"UTF-32 uses 4 bytes per character uniformly, offering simple processing but with significant storage costs.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"In most applications, UTF-8 is the best choice due to its compatibility and efficiency.\"), \"\\n\", React.createElement(_components.h2, null, \"Why the Fuss About Unicode?\"), \"\\n\", React.createElement(_components.p, null, \"Why not just stick with ASCII? Well, ASCII only covers 128 characters—barely enough for basic English. Unicode, however, aims to cover all text systems in a single, universal standard, eliminating the confusion and compatibility issues of past encoding schemes.\"), \"\\n\", React.createElement(_components.p, null, \"In the early 90s, the internet accelerated Unicode’s adoption as more text needed to be exchanged globally. Unicode incorporates characters from legacy encodings (e.g., Windows-1252) to ensure backward compatibility.\"), \"\\n\", React.createElement(_components.h2, null, \"Common Unicode Myths\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"\\\"Unicode is 16-bit and has 65,536 characters.\\\"\"), \"\\r\\nIncorrect. Unicode is not limited to 16 bits. While early Unicode proposals suggested a 16-bit system, Unicode today spans over 1 million code points (0 to 0x10FFFF).\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"\\\"Unicode is an encoding.\\\"\"), \"\\r\\nAlso incorrect. Unicode is a standard, not an encoding. UTF-8, UTF-16, and UTF-32 are encoding formats that define how to represent Unicode code points in bytes.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"Practical Advice for Working with Unicode\"), \"\\n\", React.createElement(_components.p, null, \"Handling Unicode effectively requires knowing:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"The level of representation you’re dealing with—code points, bytes, or glyphs.\"), \"\\n\", React.createElement(_components.li, null, \"Encoding consistency—never assume encoding, especially for data from unknown sources.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Pro-tip\"), \": Modern systems default to UTF-8, but misinterpretations can still occur, often with ISO-8859-1 (latin1) or cp1252 on legacy systems.\"), \"\\n\", React.createElement(_components.h2, null, \"Exploring Unicode in Python\"), \"\\n\", React.createElement(_components.p, null, \"Here's a Python example to illustrate basic Unicode encoding and decoding.\\r\\n(soao)[/graphics/blog/10-minutes-of-unicode/string_to_x.png]\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"python\\\"><pre style=\\\"counter-reset: linenumber NaN\\\" class=\\\"language-python line-numbers\\\"><code class=\\\"language-python\\\"> <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token builtin\\\">chr</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0x1F64F</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\"># (Unicode character represented by code point U+1F64F)</span>\\r\\n 🙏\\r\\n <span class=\\\"token comment\\\"># Also, chr() creates characters from code points.</span>\\r\\n <span class=\\\"token comment\\\"># We could do chr(0xFF) or chr(33)</span>\\r\\n <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token builtin\\\">hex</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token builtin\\\">ord</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"🙏\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\"># -> 0x1f64f</span>\\r\\n <span class=\\\"token comment\\\"># ord() is the reverse operation - giving us the base10 codepoint for a specific character</span>\\r\\n <span class=\\\"token punctuation\\\">[</span><span class=\\\"token builtin\\\">ord</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">for</span> i <span class=\\\"token keyword\\\">in</span> <span class=\\\"token string\\\">\\\"hello world\\\"</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token comment\\\"># -> [104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100]</span>\\r\\n\\r\\n <span class=\\\"token comment\\\"># We can represent characters in many analogue ways</span>\\r\\n <span class=\\\"token triple-quoted-string string\\\">r\\\"\\\"\\\"  Escape Sequence    Meaning                                             How To Express \\\"a\\\"\\r\\n     \\\"\\\\ooo\\\"              Character with octal value ooo                      \\\"\\\\141\\\"\\r\\n     \\\"\\\\xhh\\\"              Character with hex value hh                         \\\"\\\\x61\\\"\\r\\n     \\\"\\\\N{name}\\\"          Character named name in the Unicode database        \\\"\\\\N{LATIN SMALL LETTER A}\\\"\\r\\n     \\\"\\\\uxxxx\\\"            Character with 16-bit (2-byte) hex value xxxx       \\\"\\\\u0061\\\"\\r\\n     \\\"\\\\Uxxxxxxxx\\\"        Character with 32-bit (4-byte) hex value xxxxxxxx   \\\"\\\\U00000061\\\"\\r\\n \\\"\\\"\\\"</span>\\r\\n <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>\\r\\n     <span class=\\\"token string\\\">\\\"a\\\"</span> <span class=\\\"token operator\\\">==</span>\\r\\n     <span class=\\\"token string\\\">\\\"\\\\x61\\\"</span> <span class=\\\"token operator\\\">==</span>\\r\\n     <span class=\\\"token string\\\">\\\"\\\\N{LATIN SMALL LETTER A}\\\"</span> <span class=\\\"token operator\\\">==</span>\\r\\n     <span class=\\\"token string\\\">\\\"\\\\u0061\\\"</span> <span class=\\\"token operator\\\">==</span>\\r\\n     <span class=\\\"token string\\\">\\\"\\\\U00000061\\\"</span>\\r\\n     <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\"># Prints `True` as they are all identical</span>\\r\\n <span class=\\\"token comment\\\"># bin, hex and oct are only representations, not a fundamental change in the input.</span>\\r\\n     <span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> <span class=\\\"token keyword\\\">import</span> unicodedata\\r\\n <span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> unicodedata<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"€\\\"</span><span class=\\\"token punctuation\\\">)</span>\\r\\n <span class=\\\"token string\\\">'EURO SIGN'</span>\\r\\n <span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> unicodedata<span class=\\\"token punctuation\\\">.</span>lookup<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"EURO SIGN\\\"</span><span class=\\\"token punctuation\\\">)</span>\\r\\n <span class=\\\"token string\\\">'€'</span>\\r\\n <span class=\\\"token builtin\\\">str</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">b\\\"\\\\xc2\\\\xbc cup of flour\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"utf-8\\\"</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\"># -> '¼ cup of flour'</span>\\r\\n <span class=\\\"token builtin\\\">str</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0xc0ffee</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\"># -> '12648430'</span>\\r\\n\\r\\n text <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Hello, Unicode! 🌍\\\"</span>\\r\\n utf8_encoded <span class=\\\"token operator\\\">=</span> text<span class=\\\"token punctuation\\\">.</span>encode<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'utf-8'</span><span class=\\\"token punctuation\\\">)</span>\\r\\n <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-interpolation\\\"><span class=\\\"token string\\\">f\\\"UTF-8 Encoded: </span><span class=\\\"token interpolation\\\"><span class=\\\"token punctuation\\\">{</span>utf8_encoded<span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token string\\\">\\\"</span></span><span class=\\\"token punctuation\\\">)</span>\\r\\n utf8_decoded <span class=\\\"token operator\\\">=</span> utf8_encoded<span class=\\\"token punctuation\\\">.</span>decode<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'utf-8'</span><span class=\\\"token punctuation\\\">)</span>\\r\\n <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-interpolation\\\"><span class=\\\"token string\\\">f\\\"Decoded Text: </span><span class=\\\"token interpolation\\\"><span class=\\\"token punctuation\\\">{</span>utf8_decoded<span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token string\\\">\\\"</span></span><span class=\\\"token punctuation\\\">)</span>\\r\\n\\r\\n emoji <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"🤨\\\"</span>  <span class=\\\"token comment\\\"># U+1F928</span>\\r\\n <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-interpolation\\\"><span class=\\\"token string\\\">f\\\"Emoji bytes in UTF-8: </span><span class=\\\"token interpolation\\\"><span class=\\\"token punctuation\\\">{</span>emoji<span class=\\\"token punctuation\\\">.</span>encode<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'utf-8'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token string\\\">\\\"</span></span><span class=\\\"token punctuation\\\">)</span></code><span aria-hidden=\\\"true\\\" class=\\\"line-numbers-rows\\\" style=\\\"white-space: normal; width: auto; left: 0;\\\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"Encoding text with UTF-8 converts characters into byte representations, which is crucial for I/O operations.\"), \"\\n\", React.createElement(_components.h2, null, \"Final Note on Unicode\"), \"\\n\", React.createElement(_components.p, null, \"Working with Unicode can seem complex, but the main takeaway is this: Unicode standardizes the representation of text across different languages and platforms. Encodings (like UTF-8) implement Unicode by translating its code points into bytes. Each character we see is not just a letter or symbol but a defined code point, encoded into bytes, and then rendered as a glyph.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","h2","p","ul","li","h3","ol","strong","span","_provideComponents","components","React","Typography","variant","sx","pt","gutterBottom","pageContext","frontmatter","title","Box","color","date","dangerouslySetInnerHTML","__html","wrapper","MDXLayout"],"sourceRoot":""}