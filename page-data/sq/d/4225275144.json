{"data":{"allMdx":{"totalCount":2,"edges":[{"node":{"id":"da2357f0-87f7-5cbb-a9a2-1c5bcdd1d306","body":"import {Container, Divider, Typography} from \"@mui/material\";\r\nimport {Box} from \"@mui/system\";\r\n\r\n<Typography variant=\"h1\" sx={{pt: 5}} gutterBottom>\r\n# {props.pageContext.frontmatter.title}\r\n</Typography>\r\n<Box>\r\n    <Typography variant=\"h5\" color=\"textSecondary\" gutterBottom>\r\n        {props.pageContext.frontmatter.date}\r\n    </Typography>\r\n</Box>\r\n\r\n## Unicode & The Unicode Standard\r\nUnicode(formally, the Unicode Standard) is a framework for encoding, representing, and managing text on digital systems.Maintained by the Unicode Consortium, Unicode currently defines nearly 150, 000 characters across a wide variety of scripts and symbols.Unicode assigns each character a code point, a unique number, but it‚Äôs essential to remember that Unicode itself is not an encoding; it‚Äôs a map of code points that encodings like UTF - 8, UTF - 16, and UTF - 32 then translate into bytes.\r\n\r\nAs of Unicode v15.0, the standard includes 161 scripts‚Äîsome used by only one language and others by multiple languages. Unicode supports current and historic scripts, including extinct languages.\r\n\r\n## Clarification on Glyphs vs. Characters\r\nIt‚Äôs common to refer to characters as \"glyphs,\" but technically a glyph is the visual representation of a character and can vary depending on the font.\r\n\r\n## What is a Script?\r\nIn Unicode, a script is a set of characters and symbols used for writing one or more languages. For example:\r\n- Basic Latin script spans code points U+0000 to U+007F and includes the English alphabet.\r\n- Cyrillic script spans U+0400 to U+04FF and includes characters for Russian and related languages.\r\n\r\nSome scripts, like Armenian, represent only one language, while others, like Latin, are used by multiple languages, including English, French, and Vietnamese.\r\n\r\n## The Era Before Unicode\r\nBefore Unicode, text encoding was fragmented into various character encodings specific to languages or regions (e.g., ASCII, ISO 8859, and Windows-1252). These encoding standards often conflicted, resulting in garbled text when transferred across systems that used different encoding schemes.\r\n\r\nFor example:\r\n- ASCII uses one 8-bit byte per character, but its code points cover only the basic Latin alphabet and control characters.\r\n- Extended standards, like ISO 8859 and Windows-1252, add characters but remain limited by encoding space, often overlapping in ways that caused compatibility issues.\r\n\r\nUnicode was created to unify these encoding standards into a single, comprehensive system to represent most of the world's languages.\r\n\r\n## I/O, Bytes & Encodings\r\n### Why There‚Äôs No Such Thing as \"Plain Text\"\r\nWhen dealing with text as bytes, knowing the encoding used to generate those bytes is crucial. Text without encoding context is meaningless to a computer, as bytes are just binary data until interpreted by an encoding scheme.\r\n\r\nThis is especially true in I/O operations. When a text file is sent from computer A in Japan to computer B in the USA, we need the correct encoding to interpret the byte stream properly.\r\n\r\n### How Encoding is Determined\r\nEncoding is often specified by context:\r\n- Over the internet, it‚Äôs specified in HTTP headers (e.g., \"Content-Type: text/html; charset=UTF-8\").\r\n- In HTML or XML files, it appears in metadata (\\<meta charset=\"UTF-8\"\\>).\r\n\r\nWhen encoding isn‚Äôt specified, heuristics can help, but they are unreliable. Always specify encoding to avoid misinterpretation.\r\n\r\n## How UTF-8 Works\r\nUTF-8 is a variable-length encoding that represents Unicode code points in 1 to 4 bytes. It‚Äôs backward-compatible with ASCII, meaning ASCII text is also valid UTF-8 text.\r\n\r\nExample:\r\n- The letter \"A\" (code point U+0041) in UTF-8 is encoded as a single byte (0x41).\r\n\r\nUTF-8 is widely used on the web and is often the default encoding in systems, programming languages, and applications.\r\n\r\n## Notes on Encoding Variants\r\n- UTF-16 uses 2 or 4 bytes per character, which can be beneficial for languages with many non-ASCII characters but has disadvantages in storage efficiency.\r\n- UTF-32 uses 4 bytes per character uniformly, offering simple processing but with significant storage costs.\r\n\r\nIn most applications, UTF-8 is the best choice due to its compatibility and efficiency.\r\n\r\n## Why the Fuss About Unicode?\r\nWhy not just stick with ASCII? Well, ASCII only covers 128 characters‚Äîbarely enough for basic English. Unicode, however, aims to cover all text systems in a single, universal standard, eliminating the confusion and compatibility issues of past encoding schemes.\r\n\r\nIn the early 90s, the internet accelerated Unicode‚Äôs adoption as more text needed to be exchanged globally. Unicode incorporates characters from legacy encodings (e.g., Windows-1252) to ensure backward compatibility.\r\n\r\n## Common Unicode Myths\r\n1. **\"Unicode is 16-bit and has 65,536 characters.\"**\r\nIncorrect. Unicode is not limited to 16 bits. While early Unicode proposals suggested a 16-bit system, Unicode today spans over 1 million code points (0 to 0x10FFFF).\r\n\r\n2. **\"Unicode is an encoding.\"**\r\nAlso incorrect. Unicode is a standard, not an encoding. UTF-8, UTF-16, and UTF-32 are encoding formats that define how to represent Unicode code points in bytes.\r\n\r\n## Practical Advice for Working with Unicode\r\nHandling Unicode effectively requires knowing:\r\n- The level of representation you‚Äôre dealing with‚Äîcode points, bytes, or glyphs.\r\n- Encoding consistency‚Äînever assume encoding, especially for data from unknown sources.\r\n\r\n**Pro-tip**: Modern systems default to UTF-8, but misinterpretations can still occur, often with ISO-8859-1 (latin1) or cp1252 on legacy systems.\r\n\r\n## Exploring Unicode in Python\r\nHere's a Python example to illustrate basic Unicode encoding and decoding.\r\n(soao)[/graphics/blog/10-minutes-of-unicode/string_to_x.png]\r\n\r\n```python\r\n print(chr(0x1F64F)) # (Unicode character represented by code point U+1F64F)\r\n üôè\r\n # Also, chr() creates characters from code points.\r\n # We could do chr(0xFF) or chr(33)\r\n print(hex(ord(\"üôè\"))) # -> 0x1f64f\r\n # ord() is the reverse operation - giving us the base10 codepoint for a specific character\r\n [ord(i) for i in \"hello world\"] # -> [104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100]\r\n\r\n # We can represent characters in many analogue ways\r\n r\"\"\"  Escape Sequence    Meaning                                             How To Express \"a\"\r\n     \"\\ooo\"              Character with octal value ooo                      \"\\141\"\r\n     \"\\xhh\"              Character with hex value hh                         \"\\x61\"\r\n     \"\\N{name}\"          Character named name in the Unicode database        \"\\N{LATIN SMALL LETTER A}\"\r\n     \"\\uxxxx\"            Character with 16-bit (2-byte) hex value xxxx       \"\\u0061\"\r\n     \"\\Uxxxxxxxx\"        Character with 32-bit (4-byte) hex value xxxxxxxx   \"\\U00000061\"\r\n \"\"\"\r\n print(\r\n     \"a\" ==\r\n     \"\\x61\" ==\r\n     \"\\N{LATIN SMALL LETTER A}\" ==\r\n     \"\\u0061\" ==\r\n     \"\\U00000061\"\r\n     ) # Prints `True` as they are all identical\r\n # bin, hex and oct are only representations, not a fundamental change in the input.\r\n     >>> import unicodedata\r\n >>> unicodedata.name(\"‚Ç¨\")\r\n 'EURO SIGN'\r\n >>> unicodedata.lookup(\"EURO SIGN\")\r\n '‚Ç¨'\r\n str(b\"\\xc2\\xbc cup of flour\", \"utf-8\") # -> '¬º cup of flour'\r\n str(0xc0ffee) # -> '12648430'\r\n\r\n text = \"Hello, Unicode! üåç\"\r\n utf8_encoded = text.encode('utf-8')\r\n print(f\"UTF-8 Encoded: {utf8_encoded}\")\r\n utf8_decoded = utf8_encoded.decode('utf-8')\r\n print(f\"Decoded Text: {utf8_decoded}\")\r\n\r\n emoji = \"ü§®\"  # U+1F928\r\n print(f\"Emoji bytes in UTF-8: {emoji.encode('utf-8')}\")\r\n```\r\n\r\nEncoding text with UTF-8 converts characters into byte representations, which is crucial for I/O operations.\r\n\r\n## Final Note on Unicode\r\nWorking with Unicode can seem complex, but the main takeaway is this: Unicode standardizes the representation of text across different languages and platforms. Encodings (like UTF-8) implement Unicode by translating its code points into bytes. Each character we see is not just a letter or symbol but a defined code point, encoded into bytes, and then rendered as a glyph.","frontmatter":{"slug":"blog/ten-minutes-of-unicode","date":"November 13, 2024","title":"10 Minutes of Unicode","description":"Explore how Unicode encodes text for consistent representation of characters across multiple platforms and languages.","categories":[""],"tags":["Unicode","Character Encoding"],"featured":false,"series":""}}},{"node":{"id":"a6c925a8-06b4-5529-ae74-9cd1ca846327","body":"In this brief article which features a comprehensive bash script for setting up an SMTP mailserver...\r\n\r\n# The Script\r\n```bash\r\n#!/bin/bash\r\nDOMAIN=\"greenpower.monster\"\r\nSMTP_SUBDOMAIN=\"smtp\"\r\necho \"A record for domain is:\"\r\ndig +short ${DOMAIN}\r\n\r\nadduser --gecos \"Noreply\" --disabled-password noreply && echo \"noreply:Kode1234!\" | chpasswd\r\n\r\nexport DEBIAN_FRONTEND=noninteractive\r\necho \"postfix postfix/main_mailer_type select Internet\" | debconf-set-selections\r\necho \"postfix postfix/mailname string ${SMTP_SUBDOMAIN}.${DOMAIN}\" | debconf-set-selections\r\n\r\n\r\nif ! apt update && apt upgrade -y; then\r\n    echo \"Failed to update packages. Exiting.\"\r\nfi\r\n\r\napt install -y postfix dovecot-core dovecot-imapd certbot python3-certbot-nginx ufw lsof rsyslog mailutils dnsutils\r\ntouch /var/log/mail.log\r\ntouch /var/log/mail.err\r\nchmod 640 /var/log/mail.log\r\nchmod 640 /var/log/mail.err\r\n\r\necho \"Configuring Postfix...\"\r\npostconf -e \"myhostname = ${SMTP_SUBDOMAIN}.${DOMAIN}\"\r\npostconf -e \"mydomain = ${DOMAIN}\"\r\npostconf -e \"myorigin = ${DOMAIN}\"\r\npostconf -e \"mydestination = localhost, localhost.${DOMAIN}, ${DOMAIN}, ${SMTP_SUBDOMAIN}.${DOMAIN}\"\r\npostconf -e \"inet_interfaces = all\"\r\npostconf -e \"inet_protocols = ipv4\"\r\npostconf -e \"mynetworks = 127.0.0.0/8\"\r\n# shellcheck disable=SC2154\r\npostconf -e \"relay_domains = $mydomain\"\r\npostconf -e \"smtpd_tls_protocols = !SSLv2, !SSLv3\"  # Disable insecure protocols\r\npostconf -e \"smtpd_tls_mandatory_protocols = !SSLv2, !SSLv3\"\r\npostconf -e \"smtpd_tls_auth_only = no\"\r\npostconf -e \"smtpd_tls_received_header = yes\"\r\n\r\ncat <<EOF > /etc/postfix/relay_domains\r\n${DOMAIN} OK\r\ngmail.com OK\r\nprotonmail.com OK\r\nEOF\r\n\r\ncat <<EOF > /etc/postfix/master.cf\r\nsubmission inet n       -       y       -       -       smtpd\r\n  -o syslog_name=postfix/submission\r\n  -o smtpd_tls_security_level=encrypt\r\n  -o smtpd_sasl_auth_enable=yes\r\n  -o smtpd_recipient_restrictions=permit_sasl_authenticated,reject\r\nEOF\r\n\r\necho \"Configuring Dovecot... (without SSL paths initially)\"\r\ncat <<EOF > /etc/dovecot/dovecot.conf\r\nmail_location = maildir:~/Maildir\r\n\r\nprotocols = imap\r\nauth_mechanisms = plain login\r\n\r\nservice imap-login {\r\n   inet_listener imap {\r\n      port = 0  # Disable plain IMAP\r\n   }\r\n   inet_listener imaps {\r\n      port = 993\r\n      ssl = yes\r\n   }\r\n}\r\nservice auth {\r\n   unix_listener /var/spool/postfix/private/auth {\r\n      mode = 0660\r\n      user = postfix\r\n      group = postfix\r\n   }\r\n}\r\n\r\npassdb {\r\n  driver = pam\r\n}\r\n\r\nuserdb {\r\n  driver = passwd\r\n}\r\nEOF\r\n\r\nif lsof -i :80; then\r\n    echo \"Port 80 is in use. Stopping the process using it...\"\r\n    fuser -k 80/tcp\r\nfi\r\n\r\n\r\necho \"Obtaining Let's Encrypt certificates using --standalone web server\"\r\nif ! certbot certonly --standalone --non-interactive --agree-tos --email ta.privat@protonmail.com -d ${DOMAIN}; then\r\n    echo \"Failed to obtain Let's Encrypt certificates. Please check the logs.\"\r\n    exit 1\r\nfi\r\n\r\nif [ ! -f /etc/letsencrypt/live/${DOMAIN}/fullchain.pem ] || [ ! -f /etc/letsencrypt/live/${DOMAIN}/privkey.pem ]; then\r\n    echo \"SSL certificate files do not exist. Please check the certificate generation step.\"\r\n    exit 1\r\nfi\r\n\r\necho \"Updating Dovecot configuration with SSL paths...\" # CHEKC THIS!\r\ncat <<EOF >> /etc/dovecot/dovecot.conf\r\nssl_cert = </etc/letsencrypt/live/${DOMAIN}/fullchain.pem\r\nssl_key = </etc/letsencrypt/live/${DOMAIN}/privkey.pem\r\nEOF\r\n\r\necho \"Configuring Dovecot for SASL...\"\r\npostconf -e \"smtpd_sasl_type = dovecot\"\r\npostconf -e \"smtpd_sasl_path = private/auth\"\r\npostconf -e \"smtpd_sasl_local_domain = ${DOMAIN}\"\r\npostconf -e \"smtpd_sasl_auth_enable = yes\"\r\npostconf -e \"smtpd_recipient_restrictions = permit_sasl_authenticated, reject_unauth_destination\"\r\npostconf -e \"smtpd_sender_restrictions = permit_mynetworks, permit_sasl_authenticated, reject\"\r\npostconf -e \"smtpd_tls_cert_file = /etc/letsencrypt/live/${DOMAIN}/fullchain.pem\"\r\npostconf -e \"smtpd_tls_key_file = /etc/letsencrypt/live/${DOMAIN}/privkey.pem\"\r\npostconf -e \"smtpd_use_tls = yes\"\r\npostconf -e \"debug_peer_list = localhost\"\r\n\r\necho \"Restarting Dovecot with new SSL configuration...\"\r\nif ! systemctl restart dovecot; then\r\n    echo \"Failed to restart Dovecot. Exiting.\"\r\nfi\r\n\r\necho \"Restarting Postfix...\"\r\nif ! systemctl restart postfix; then\r\n    echo \"Failed to restart Postfix. Exiting.\"\r\nfi\r\n\r\necho \"Configuring UFW firewall rules...\"\r\nufw allow 25/tcp  # SMTP\r\nufw allow 465/tcp # SMTPS\r\nufw allow 587/tcp # Submission\r\nufw allow 993/tcp # IMAPS\r\nif ! ufw status | grep -q \"Status: active\"; then\r\n    ufw enable\r\nfi\r\n\r\necho \"Creating user noreply@${DOMAIN}...\"\r\n#doveadm user add noreply@${DOMAIN} Kode1234!\r\ndoveadm user add noreply\r\n\r\nmkdir -p /home/noreply/Maildir/{cur,new,tmp}\r\nchown -R noreply:noreply /home/noreply/Maildir\r\n\r\nmkdir -p /var/mail/noreply\r\nchown noreply:noreply /var/mail/noreply\r\necho \"mail_location = maildir:/var/mail/noreply\" >> /etc/dovecot/conf.d/10-mail.conf\r\n\r\necho \"Mail server setup completed successfully!\"\r\n\r\necho \"This is a test email.\" | mail -s \"Test Email Subject\" noreply@${DOMAIN}\r\nless /var/mail/noreply\r\n# postmap /etc/postfix/relay_domains\r\n\r\necho \"Reloading Postfix and Dovecot...\"\r\nsystemctl reload postfix\r\nsystemctl reload dovecot\r\n```","frontmatter":{"slug":"blog/setup-a-postfix-mailserver","date":"November 06, 2024","title":"Let's Configure a Postfix Mailserver","description":"This script takes you through the most critical steps in setting up a basic postfix mailserver for a custom domain.","categories":["bash"],"tags":["bash","postfix"],"featured":true,"series":""}}}]}}}