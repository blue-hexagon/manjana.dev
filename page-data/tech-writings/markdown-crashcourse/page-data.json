{"componentChunkName":"component---src-pages-tech-writings-markdown-remark-frontmatter-slug-jsx","path":"/tech-writings/markdown-crashcourse/","result":{"data":{"markdownRemark":{"html":"<p>In this article, we explore a fascinating Python script that showcases a unique approach to payload encoding and\r\ndecoding. This script is designed to encode Python scripts as a sequence of files, each containing small parts of the\r\npayload, and later decode them to reconstruct the original script. This process can be valuable in various cybersecurity\r\napplications, such as obfuscation techniques or distributed systems where payloads need to be delivered securely.</p>\n<p>The script features a set of classes that handle the encoding and decoding process, including a payload generator, file\r\nencoder, file decoder, and an execution handler. We'll break down the functionality and the key concepts in the code to\r\nbetter understand how it works and how you can leverage it in your own projects.</p>\n<h1>Key Concepts and Workflow</h1>\n<h2>Imports</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> glob\r\n<span class=\"token keyword\">import</span> os\r\n<span class=\"token keyword\">import</span> platform\r\n<span class=\"token keyword\">import</span> random\r\n<span class=\"token keyword\">import</span> re\r\n<span class=\"token keyword\">import</span> sys\r\n<span class=\"token keyword\">from</span> os <span class=\"token keyword\">import</span> walk\r\n<span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> List<span class=\"token punctuation\">,</span> Tuple</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Payload Class</h2>\n<p>The Payload class takes a string and applies a random \"rotation\" to each character, encoding the original content into a\r\nseemingly random sequence. This rotation is then reversed during decoding to retrieve the original payload. The process\r\ninvolves encoding and decoding each character based on a random rotation sequence.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> ascii_char<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> rotation<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> string_index<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n        self<span class=\"token punctuation\">.</span>ascii_char <span class=\"token operator\">=</span> ascii_char\r\n        self<span class=\"token punctuation\">.</span>string_index <span class=\"token operator\">=</span> string_index\r\n        self<span class=\"token punctuation\">.</span>rotation <span class=\"token operator\">=</span> rotation\r\n\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Payload</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> raw_content<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\r\n        self<span class=\"token punctuation\">.</span>raw_content<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> raw_content\r\n        random<span class=\"token punctuation\">.</span>seed<span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span>\r\n        self<span class=\"token punctuation\">.</span>rotation_sequence <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>raw_content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>raw_content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\r\n        <span class=\"token comment\"># print(self.raw_content)</span>\r\n        <span class=\"token comment\"># print(self.rotation_sequence)</span>\r\n\r\n        coded_content <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\r\n        <span class=\"token keyword\">for</span> idx <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>rotation_sequence<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n            raw_content_char <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>raw_content<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-16'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>raw_content_char<span class=\"token punctuation\">)</span>\r\n            rotation_sequence_int <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>rotation_sequence<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span>\r\n            <span class=\"token keyword\">if</span> raw_content_char <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'\\r'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\r\n                coded_content <span class=\"token operator\">+=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>raw_content_char<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> rotation_sequence_int<span class=\"token punctuation\">)</span>\r\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>coded_content<span class=\"token punctuation\">)</span>\r\n        decoded_conent <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\r\n        <span class=\"token keyword\">for</span> idx <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>rotation_sequence<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n            enc_content_char <span class=\"token operator\">=</span> coded_content<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span>\r\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>enc_content_char<span class=\"token punctuation\">)</span>\r\n            rotation_sequence_int <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>rotation_sequence<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span>\r\n            <span class=\"token keyword\">if</span> coded_content<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'\\r'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\r\n                decoded_conent <span class=\"token operator\">+=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>enc_content_char<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> rotation_sequence_int<span class=\"token punctuation\">)</span>\r\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>decoded_conent<span class=\"token punctuation\">)</span>\r\n        sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>File Encoder</h2>\n<p>The FileEncoder class converts the encoded payload into individual files, where each file represents a portion of the\r\npayload, encrypted with a specific rotation value. These files are named based on a combination of ASCII values and the\r\nrotation applied to them. This approach allows us to split the payload into pieces, which can then be distributed or\r\nstored separately.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FileEncoder</span><span class=\"token punctuation\">:</span>\r\n    write_files<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>File<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\r\n\r\n    <span class=\"token keyword\">def</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> python_script<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\r\n        <span class=\"token keyword\">for</span> idx<span class=\"token punctuation\">,</span> char <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>python_script<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n            idx <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>rjust<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span>\r\n            rotation <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span>\r\n            self<span class=\"token punctuation\">.</span>write_files<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>File<span class=\"token punctuation\">(</span>ascii_char<span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rotation<span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>rotation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> string_index<span class=\"token operator\">=</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>idx<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n        <span class=\"token keyword\">for</span> <span class=\"token builtin\">file</span> <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>write_files<span class=\"token punctuation\">:</span>\r\n            <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"dist/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>ascii_char<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>rotation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>string_index<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">,</span> mode<span class=\"token operator\">=</span><span class=\"token string\">\"wb+\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\r\n                rot <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SHIFT\"</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>rotation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n                f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>rot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>File Decoder</h2>\n<p>The FileDecoder class reads the encoded files, sorts them by their indices, and reconstructs the original payload by\r\nreversing the rotations applied during encoding. This is an example of file-based encoding, where the payload is split\r\nand stored in separate files, only to be reassembled when needed.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FileDecoder</span><span class=\"token punctuation\">:</span>\r\n    read_files<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>Tuple<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># List[Tuple[ascii_character, str_index]]</span>\r\n\r\n    <span class=\"token keyword\">def</span> <span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">:</span>\r\n        files <span class=\"token operator\">=</span> <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>read_files<span class=\"token punctuation\">,</span> key<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n        rendered_string <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\r\n        <span class=\"token keyword\">for</span> <span class=\"token builtin\">file</span> <span class=\"token keyword\">in</span> files<span class=\"token punctuation\">:</span>\r\n            <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"./dist/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">,</span> mode<span class=\"token operator\">=</span><span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\r\n                rotation <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n            rendered_string <span class=\"token operator\">+=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>rotation<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n        <span class=\"token keyword\">return</span> rendered_string\r\n\r\n    <span class=\"token keyword\">def</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\r\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>dirpath<span class=\"token punctuation\">,</span> dirnames<span class=\"token punctuation\">,</span> filenames<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> walk<span class=\"token punctuation\">(</span><span class=\"token string\">\"./dist\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n            <span class=\"token keyword\">for</span> filename <span class=\"token keyword\">in</span> filenames<span class=\"token punctuation\">:</span>\r\n                self<span class=\"token punctuation\">.</span>read_files<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Executor Class</h2>\n<p>The Executor class ties everything together. It checks whether the script is running on a supported operating system (\r\nWindows in this case), encodes the payload using the FileEncoder, and then decodes and executes it. The payload itself\r\nis a Python script that, when decoded, prints a specific flag to the console.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Executor</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n        self<span class=\"token punctuation\">.</span>check_os_is_supported<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n        self<span class=\"token punctuation\">.</span>payload <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">\"\"\"import subprocess\\r\\nprocess = subprocess.Popen(('python -c \"import this\"'), shell=True, stdout=subprocess.PIPE)\\r\\nprint('The flag is: '+ process.stdout.read()[4:7].decode('utf-8'))\"\"\"</span>\r\n        self<span class=\"token punctuation\">.</span>encoder <span class=\"token operator\">=</span> FileEncoder<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n        self<span class=\"token punctuation\">.</span>decoder <span class=\"token operator\">=</span> FileDecoder<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n\r\n    <span class=\"token decorator annotation punctuation\">@staticmethod</span>\r\n    <span class=\"token keyword\">def</span> <span class=\"token function\">check_os_is_supported</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\r\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"windows\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>platform<span class=\"token punctuation\">.</span>platform<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n            sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span><span class=\"token string\">\"This application only supports Windows OS\"</span><span class=\"token punctuation\">)</span>\r\n\r\n    <span class=\"token keyword\">def</span> <span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n        self<span class=\"token punctuation\">.</span>cleanup<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n        payload <span class=\"token operator\">=</span> Payload<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">)</span>\r\n        self<span class=\"token punctuation\">.</span>encoder<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">.</span>raw_content<span class=\"token punctuation\">)</span>\r\n\r\n    <span class=\"token keyword\">def</span> <span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n        self<span class=\"token punctuation\">.</span>decoder<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n        deciperhed_string <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>decoder<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n        <span class=\"token keyword\">exec</span><span class=\"token punctuation\">(</span>deciperhed_string<span class=\"token punctuation\">)</span>\r\n\r\n    <span class=\"token decorator annotation punctuation\">@staticmethod</span>\r\n    <span class=\"token keyword\">def</span> <span class=\"token function\">cleanup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\r\n        files <span class=\"token operator\">=</span> glob<span class=\"token punctuation\">.</span>glob<span class=\"token punctuation\">(</span><span class=\"token string\">\"./dist/*\"</span><span class=\"token punctuation\">)</span>\r\n        <span class=\"token keyword\">for</span> f <span class=\"token keyword\">in</span> files<span class=\"token punctuation\">:</span>\r\n            os<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\r\n    executor <span class=\"token operator\">=</span> Executor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n    executor<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n    executor<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1>How the Code Works</h1>\n<h2>The Payload Generation</h2>\n<p>The payload itself is a Python script that prints out a portion of the Zen of Python (import this). The payload is first\r\nencoded using a random rotation method that alters each character based on a random number. This makes the payload\r\nharder to read or understand without decoding.</p>\n<h2>Encoding the Payload</h2>\n<p>The FileEncoder class writes each encoded character into separate files, using a combination of the character's ASCII\r\nvalue and the random rotation applied to it. These files are saved in a dist directory. Each file represents a fragment\r\nof the encoded payload.</p>\n<h2>Decoding the Payload</h2>\n<p>The FileDecoder class reads all the fragmented files, sorts them by their indices, and reconstructs the original payload\r\nby reversing the rotations. The reconstructed payload is then executed using Python’s exec function.</p>\n<h2>Execution</h2>\n<p>The Executor class ensures that the entire process—encoding, file creation, decoding, and execution—runs smoothly. It\r\nfirst encodes the payload and writes it to disk, then decodes the files and executes the payload.</p>\n<h1>Potential Use Cases</h1>\n<h2>Obfuscation</h2>\n<p>This technique can be used to obfuscate Python scripts, making it harder to analyze or reverse-engineer the payload.</p>\n<h2>Distributed Systems</h2>\n<p>In scenarios where a payload needs to be split across multiple systems or devices, this method of encoding the payload\r\ninto separate pieces can help facilitate secure distribution.</p>\n<h2>Secure Execution:</h2>\n<p>If you need to execute a script in a secure environment where the script's contents should not be exposed in plain text,\r\nthis encoding and decoding mechanism can help maintain confidentiality.</p>\n<h1>Conclusion</h1>\n<p>This Python script provides a creative and technical approach to encoding and decoding payloads by leveraging file-based\r\nencoding, random rotation, and the ability to execute the final payload after decoding. It's a great example of how\r\nencoding can be used for security, obfuscation, and payload delivery. Understanding and implementing such methods can\r\nprovide valuable insights for developing more robust and secure applications.</p>\n<p>Feel free to explore and modify the code to fit your own use cases or to further experiment with encoding techniques in\r\nyour cybersecurity tools and applications.</p>","timeToRead":5,"tableOfContents":"<ul>\n<li>\n<p><a href=\"#key-concepts-and-workflow\">Key Concepts and Workflow</a></p>\n<ul>\n<li><a href=\"#imports\">Imports</a></li>\n<li><a href=\"#payload-class\">Payload Class</a></li>\n<li><a href=\"#file-encoder\">File Encoder</a></li>\n<li><a href=\"#file-decoder\">File Decoder</a></li>\n<li><a href=\"#executor-class\">Executor Class</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#how-the-code-works\">How the Code Works</a></p>\n<ul>\n<li><a href=\"#the-payload-generation\">The Payload Generation</a></li>\n<li><a href=\"#encoding-the-payload\">Encoding the Payload</a></li>\n<li><a href=\"#decoding-the-payload\">Decoding the Payload</a></li>\n<li><a href=\"#execution\">Execution</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#potential-use-cases\">Potential Use Cases</a></p>\n<ul>\n<li><a href=\"#obfuscation\">Obfuscation</a></li>\n<li><a href=\"#distributed-systems\">Distributed Systems</a></li>\n<li><a href=\"#secure-execution\">Secure Execution:</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#conclusion\">Conclusion</a></p>\n</li>\n</ul>","frontmatter":{"slug":"markdown-crashcourse","date":"November 07, 2024","title":"A Crash Course into Markdown","description":"A basic primer into markdown that will get you rolling.","categories":["crashcourse","dsl"],"featured":false}}},"pageContext":{"id":"d96b4c0e-29c5-58cb-bb61-db5c1f13a2f6","frontmatter__slug":"markdown-crashcourse","__params":{"frontmatter__slug":"markdown-crashcourse"}}},"staticQueryHashes":["1708891727"],"slicesMap":{}}